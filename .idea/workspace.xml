<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c993f42c-98ae-4a8e-a7f3-59b33a59215f" name="Changes" comment="Заменили абстрактный DataSource на два интерфейса: DataSource и MutableDataSource для разделения используемых методов в наследниках.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/MutableDataSource.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/MutableDataSource.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeStyleSettingsInfer">
    <option name="done" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Interface" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectId" id="2LtvXUEQxMVz7YGiJ5HuLto3HIa" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "ASKED_ADD_EXTERNAL_FILES": "true",
    "Downloaded.Files.Path.Enabled": "true",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.0"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="ReadWriteDataFromNet" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c993f42c-98ae-4a8e-a7f3-59b33a59215f" name="Changes" comment="" />
      <created>1676703234092</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1676703234092</updated>
    </task>
    <task id="LOCAL-00001" summary="в переменной data хранится null. А нул это не обьект и у него нельзя &#10;вызвать метод toString(). Именно поэтому мы получаем исключение и наша программа &#10;заканчивается с кодом 1. Т.е. не успешно.">
      <created>1676707403112</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1676707403112</updated>
    </task>
    <task id="LOCAL-00002" summary="в переменной data хранится null. А нул это не обьект и у него нельзя &#10;вызвать метод toString(). Именно поэтому мы получаем исключение и наша программа &#10;заканчивается с кодом 1. Т.е. не успешно.">
      <created>1676707832569</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1676707832569</updated>
    </task>
    <task id="LOCAL-00003" summary="Как теперь исправить ситуацию и чтобы наша программа не вылетала? Простой проверкой &#10;ну конечно же.">
      <created>1676708143513</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1676708143513</updated>
    </task>
    <task id="LOCAL-00004" summary="Можно пометить метод @Nullable и там где мы вызываем метод надо NonNull &#10;(@Nullable и там где мы вызываем метод надо NotNull) и тогда мы будем знать что метод вернет точно не нул и проверка не нужна будет.">
      <created>1676709008273</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1676709008273</updated>
    </task>
    <task id="LOCAL-00005" summary="Класс repository &#10;получает в конструктор 2 разных обьекта датасоурса, один для работы по сети, другой по &#10;кешу. И нам все равно нужен метод получения данных, значит наследуемся от абстрактного &#10;класса и получаем метод получения данных getData и в нем уже пишем нашу логику. &#10;Сначала мы попробуем извлечь данные из кеша, если там ничего нет, то пойдем в сеть. Вы &#10;можете написать обратную логику, все зависит от конкретного проекта. Здесь лишь вопрос &#10;приоритета. Предположим у вас данные одни и те же и зачем лезть в сеть каждый раз если у &#10;вас уже в кеше все есть. Логично, неправда ли? Но если у вас в сети всегда могут быть &#10;данные посвежее, то тогда дергайте метод получения данных из сети сперва и если нет &#10;интернет соединения например или ошибка произошла и ничего не вернулось, то смотрим в &#10;кеш. Ладно, теперь у нас есть класс который смотрит в 2 датасорса. Мы написали что у нас &#10;из сети есть данные, а в кеше нет их. Попробуем вызвать метод у репозитория">
      <created>1676710381493</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1676710381493</updated>
    </task>
    <task id="LOCAL-00006" summary="В абстрактный DataSource добавлен неабстрактный пустой метод saveData и реализован в классе сохранения в кэш&#10;&#10;CachedDataSource&#10;@Override&#10;    public void saveData(@NotNull MyData data) {&#10;        myData=data;&#10;    }&#10;Т.к. метод не абстрактный то в наследниках DataSource -&gt; CloudDataSource и Repository реализовывать его не нужно. Нюанс в том что в наследниках все равно есть возможность доступа к этому методу. А это лишнее.">
      <created>1676895300403</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1676895300403</updated>
    </task>
    <task id="LOCAL-00007" summary="Заменили абстрактный DataSource на два интерфейса: DataSource и MutableDataSource для разделения используемых методов в наследниках.">
      <created>1676897938064</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1676897938064</updated>
    </task>
    <option name="localTasksCounter" value="8" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <MESSAGE value="в переменной data хранится null. А нул это не обьект и у него нельзя &#10;вызвать метод toString(). Именно поэтому мы получаем исключение и наша программа &#10;заканчивается с кодом 1. Т.е. не успешно." />
    <MESSAGE value="Как теперь исправить ситуацию и чтобы наша программа не вылетала? Простой проверкой &#10;ну конечно же." />
    <MESSAGE value="Можно пометить метод @Nullable и там где мы вызываем метод надо NonNull &#10;(@Nullable и там где мы вызываем метод надо NotNull) и тогда мы будем знать что метод вернет точно не нул и проверка не нужна будет." />
    <MESSAGE value="Класс repository &#10;получает в конструктор 2 разных обьекта датасоурса, один для работы по сети, другой по &#10;кешу. И нам все равно нужен метод получения данных, значит наследуемся от абстрактного &#10;класса и получаем метод получения данных getData и в нем уже пишем нашу логику. &#10;Сначала мы попробуем извлечь данные из кеша, если там ничего нет, то пойдем в сеть. Вы &#10;можете написать обратную логику, все зависит от конкретного проекта. Здесь лишь вопрос &#10;приоритета. Предположим у вас данные одни и те же и зачем лезть в сеть каждый раз если у &#10;вас уже в кеше все есть. Логично, неправда ли? Но если у вас в сети всегда могут быть &#10;данные посвежее, то тогда дергайте метод получения данных из сети сперва и если нет &#10;интернет соединения например или ошибка произошла и ничего не вернулось, то смотрим в &#10;кеш. Ладно, теперь у нас есть класс который смотрит в 2 датасорса. Мы написали что у нас &#10;из сети есть данные, а в кеше нет их. Попробуем вызвать метод у репозитория" />
    <MESSAGE value="В абстрактный DataSource добавлен неабстрактный пустой метод saveData и реализован в классе сохранения в кэш&#10;&#10;CachedDataSource&#10;@Override&#10;    public void saveData(@NotNull MyData data) {&#10;        myData=data;&#10;    }&#10;Т.к. метод не абстрактный то в наследниках DataSource -&gt; CloudDataSource и Repository реализовывать его не нужно. Нюанс в том что в наследниках все равно есть возможность доступа к этому методу. А это лишнее." />
    <MESSAGE value="Заменили абстрактный DataSource на два интерфейса: DataSource и MutableDataSource для разделения используемых методов в наследниках." />
    <option name="LAST_COMMIT_MESSAGE" value="Заменили абстрактный DataSource на два интерфейса: DataSource и MutableDataSource для разделения используемых методов в наследниках." />
  </component>
</project>